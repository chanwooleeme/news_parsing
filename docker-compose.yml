services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    build: .
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - _AIRFLOW_DB_MIGRATE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
      - _AIRFLOW_WWW_USER_FIRSTNAME=admin
      - _AIRFLOW_WWW_USER_LASTNAME=user
      - _AIRFLOW_WWW_USER_EMAIL=admin@example.com
      - _AIRFLOW_WWW_USER_ROLE=Admin
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__WEBSERVER__SECRET_KEY=news_pipeline_secret_key
      - PYTHONPATH=/opt/airflow
      - AIRFLOW__LOGGING__BASE_LOG_FOLDER=/opt/airflow/logs
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - IS_DOCKER=true
    volumes:
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./pipeline/dags:/opt/airflow/dags
      - ./pipeline/tasks:/opt/airflow/tasks
      - ./pipeline/utils:/opt/airflow/utils
      - ./src:/opt/airflow/src
    depends_on:
      - postgres
      - redis
    restart: always
    command: ["webserver"]

  airflow-scheduler:
    build: .
    env_file:
      - .env
    environment:
      - _AIRFLOW_DB_MIGRATE=true
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__WEBSERVER__SECRET_KEY=news_pipeline_secret_key
      - PYTHONPATH=/opt/airflow
      - AIRFLOW__LOGGING__BASE_LOG_FOLDER=/opt/airflow/logs
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - IS_DOCKER=true
    volumes:
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./pipeline/dags:/opt/airflow/dags
      - ./pipeline/tasks:/opt/airflow/tasks
      - ./pipeline/utils:/opt/airflow/utils
      - ./src:/opt/airflow/src
    depends_on:
      - airflow-webserver
    restart: always
    command: ["scheduler"]

  airflow-worker:
    build: .
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__WEBSERVER__SECRET_KEY=news_pipeline_secret_key
      - PYTHONPATH=/opt/airflow
      - AIRFLOW__LOGGING__BASE_LOG_FOLDER=/opt/airflow/logs
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - IS_DOCKER=true
    volumes:
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./pipeline/dags:/opt/airflow/dags
      - ./pipeline/tasks:/opt/airflow/tasks
      - ./pipeline/utils:/opt/airflow/utils
      - ./src:/opt/airflow/src
    depends_on:
      - airflow-scheduler
      - redis
      - postgres
    restart: always
    command: ["celery", "worker"]

volumes:
  postgres-db-volume:
  redis_data:
